/**
 */
package net.sf.smbt.ubqt.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.smbt.ubqt.util.UbqtAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class UbqtItemProviderAdapterFactory extends UbqtAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public UbqtItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqSession} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqSessionItemProvider ubqSessionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqSession}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqSessionAdapter() {
		if (ubqSessionItemProvider == null) {
			ubqSessionItemProvider = new UbqSessionItemProvider(this);
		}

		return ubqSessionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqDisplayMode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqDisplayModeItemProvider ubqDisplayModeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqDisplayMode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqDisplayModeAdapter() {
		if (ubqDisplayModeItemProvider == null) {
			ubqDisplayModeItemProvider = new UbqDisplayModeItemProvider(this);
		}

		return ubqDisplayModeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqActionItemProvider ubqActionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqActionAdapter() {
		if (ubqActionItemProvider == null) {
			ubqActionItemProvider = new UbqActionItemProvider(this);
		}

		return ubqActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqReaction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqReactionItemProvider ubqReactionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqReaction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqReactionAdapter() {
		if (ubqReactionItemProvider == null) {
			ubqReactionItemProvider = new UbqReactionItemProvider(this);
		}

		return ubqReactionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqFiducial} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqFiducialItemProvider ubqFiducialItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqFiducial}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqFiducialAdapter() {
		if (ubqFiducialItemProvider == null) {
			ubqFiducialItemProvider = new UbqFiducialItemProvider(this);
		}

		return ubqFiducialItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqProxima} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqProximaItemProvider ubqProximaItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqProxima}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqProximaAdapter() {
		if (ubqProximaItemProvider == null) {
			ubqProximaItemProvider = new UbqProximaItemProvider(this);
		}

		return ubqProximaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqHandledReactions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqHandledReactionsItemProvider ubqHandledReactionsItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqHandledReactions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqHandledReactionsAdapter() {
		if (ubqHandledReactionsItemProvider == null) {
			ubqHandledReactionsItemProvider = new UbqHandledReactionsItemProvider(this);
		}

		return ubqHandledReactionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqEmmitedActions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqEmmitedActionsItemProvider ubqEmmitedActionsItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqEmmitedActions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqEmmitedActionsAdapter() {
		if (ubqEmmitedActionsItemProvider == null) {
			ubqEmmitedActionsItemProvider = new UbqEmmitedActionsItemProvider(this);
		}

		return ubqEmmitedActionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqSlot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqSlotItemProvider ubqSlotItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqSlot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqSlotAdapter() {
		if (ubqSlotItemProvider == null) {
			ubqSlotItemProvider = new UbqSlotItemProvider(this);
		}

		return ubqSlotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqLayout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqLayoutItemProvider ubqLayoutItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqLayout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqLayoutAdapter() {
		if (ubqLayoutItemProvider == null) {
			ubqLayoutItemProvider = new UbqLayoutItemProvider(this);
		}

		return ubqLayoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqCursor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqCursorItemProvider ubqCursorItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqCursor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqCursorAdapter() {
		if (ubqCursorItemProvider == null) {
			ubqCursorItemProvider = new UbqCursorItemProvider(this);
		}

		return ubqCursorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqComposite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqCompositeItemProvider ubqCompositeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqComposite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqCompositeAdapter() {
		if (ubqCompositeItemProvider == null) {
			ubqCompositeItemProvider = new UbqCompositeItemProvider(this);
		}

		return ubqCompositeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqPointItemProvider ubqPointItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqPointAdapter() {
		if (ubqPointItemProvider == null) {
			ubqPointItemProvider = new UbqPointItemProvider(this);
		}

		return ubqPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqBounds} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqBoundsItemProvider ubqBoundsItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqBounds}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqBoundsAdapter() {
		if (ubqBoundsItemProvider == null) {
			ubqBoundsItemProvider = new UbqBoundsItemProvider(this);
		}

		return ubqBoundsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqWidget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqWidgetItemProvider ubqWidgetItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqWidget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqWidgetAdapter() {
		if (ubqWidgetItemProvider == null) {
			ubqWidgetItemProvider = new UbqWidgetItemProvider(this);
		}

		return ubqWidgetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqImage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqImageItemProvider ubqImageItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqImage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqImageAdapter() {
		if (ubqImageItemProvider == null) {
			ubqImageItemProvider = new UbqImageItemProvider(this);
		}

		return ubqImageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqButtonItemProvider ubqButtonItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqButtonAdapter() {
		if (ubqButtonItemProvider == null) {
			ubqButtonItemProvider = new UbqButtonItemProvider(this);
		}

		return ubqButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqLabelItemProvider ubqLabelItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqLabelAdapter() {
		if (ubqLabelItemProvider == null) {
			ubqLabelItemProvider = new UbqLabelItemProvider(this);
		}

		return ubqLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqCheckbox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqCheckboxItemProvider ubqCheckboxItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqCheckbox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqCheckboxAdapter() {
		if (ubqCheckboxItemProvider == null) {
			ubqCheckboxItemProvider = new UbqCheckboxItemProvider(this);
		}

		return ubqCheckboxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqTextItemProvider ubqTextItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqTextAdapter() {
		if (ubqTextItemProvider == null) {
			ubqTextItemProvider = new UbqTextItemProvider(this);
		}

		return ubqTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqMenu} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqMenuItemProvider ubqMenuItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqMenu}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqMenuAdapter() {
		if (ubqMenuItemProvider == null) {
			ubqMenuItemProvider = new UbqMenuItemProvider(this);
		}

		return ubqMenuItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqMenuItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqMenuItemItemProvider ubqMenuItemItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqMenuItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqMenuItemAdapter() {
		if (ubqMenuItemItemProvider == null) {
			ubqMenuItemItemProvider = new UbqMenuItemItemProvider(this);
		}

		return ubqMenuItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqIncrementableRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqIncrementableRangeItemProvider ubqIncrementableRangeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqIncrementableRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqIncrementableRangeAdapter() {
		if (ubqIncrementableRangeItemProvider == null) {
			ubqIncrementableRangeItemProvider = new UbqIncrementableRangeItemProvider(this);
		}

		return ubqIncrementableRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqVuMeter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqVuMeterItemProvider ubqVuMeterItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqVuMeter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqVuMeterAdapter() {
		if (ubqVuMeterItemProvider == null) {
			ubqVuMeterItemProvider = new UbqVuMeterItemProvider(this);
		}

		return ubqVuMeterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqSpinner} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqSpinnerItemProvider ubqSpinnerItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqSpinner}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqSpinnerAdapter() {
		if (ubqSpinnerItemProvider == null) {
			ubqSpinnerItemProvider = new UbqSpinnerItemProvider(this);
		}

		return ubqSpinnerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqSlider} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqSliderItemProvider ubqSliderItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqSlider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqSliderAdapter() {
		if (ubqSliderItemProvider == null) {
			ubqSliderItemProvider = new UbqSliderItemProvider(this);
		}

		return ubqSliderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqKnob} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqKnobItemProvider ubqKnobItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqKnob}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqKnobAdapter() {
		if (ubqKnobItemProvider == null) {
			ubqKnobItemProvider = new UbqKnobItemProvider(this);
		}

		return ubqKnobItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqWidgetStyle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqWidgetStyleItemProvider ubqWidgetStyleItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqWidgetStyle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqWidgetStyleAdapter() {
		if (ubqWidgetStyleItemProvider == null) {
			ubqWidgetStyleItemProvider = new UbqWidgetStyleItemProvider(this);
		}

		return ubqWidgetStyleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqColorStyle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqColorStyleItemProvider ubqColorStyleItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqColorStyle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqColorStyleAdapter() {
		if (ubqColorStyleItemProvider == null) {
			ubqColorStyleItemProvider = new UbqColorStyleItemProvider(this);
		}

		return ubqColorStyleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqFontStyle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqFontStyleItemProvider ubqFontStyleItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqFontStyle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqFontStyleAdapter() {
		if (ubqFontStyleItemProvider == null) {
			ubqFontStyleItemProvider = new UbqFontStyleItemProvider(this);
		}

		return ubqFontStyleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqBorderStyle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqBorderStyleItemProvider ubqBorderStyleItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqBorderStyle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqBorderStyleAdapter() {
		if (ubqBorderStyleItemProvider == null) {
			ubqBorderStyleItemProvider = new UbqBorderStyleItemProvider(this);
		}

		return ubqBorderStyleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqColor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqColorItemProvider ubqColorItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqColor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqColorAdapter() {
		if (ubqColorItemProvider == null) {
			ubqColorItemProvider = new UbqColorItemProvider(this);
		}

		return ubqColorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqHsbColor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqHsbColorItemProvider ubqHsbColorItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqHsbColor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqHsbColorAdapter() {
		if (ubqHsbColorItemProvider == null) {
			ubqHsbColorItemProvider = new UbqHsbColorItemProvider(this);
		}

		return ubqHsbColorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.ubqt.UbqRgbColor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbqRgbColorItemProvider ubqRgbColorItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.ubqt.UbqRgbColor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbqRgbColorAdapter() {
		if (ubqRgbColorItemProvider == null) {
			ubqRgbColorItemProvider = new UbqRgbColorItemProvider(this);
		}

		return ubqRgbColorItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (ubqSessionItemProvider != null) ubqSessionItemProvider.dispose();
		if (ubqDisplayModeItemProvider != null) ubqDisplayModeItemProvider.dispose();
		if (ubqActionItemProvider != null) ubqActionItemProvider.dispose();
		if (ubqReactionItemProvider != null) ubqReactionItemProvider.dispose();
		if (ubqFiducialItemProvider != null) ubqFiducialItemProvider.dispose();
		if (ubqProximaItemProvider != null) ubqProximaItemProvider.dispose();
		if (ubqHandledReactionsItemProvider != null) ubqHandledReactionsItemProvider.dispose();
		if (ubqEmmitedActionsItemProvider != null) ubqEmmitedActionsItemProvider.dispose();
		if (ubqSlotItemProvider != null) ubqSlotItemProvider.dispose();
		if (ubqLayoutItemProvider != null) ubqLayoutItemProvider.dispose();
		if (ubqCursorItemProvider != null) ubqCursorItemProvider.dispose();
		if (ubqCompositeItemProvider != null) ubqCompositeItemProvider.dispose();
		if (ubqPointItemProvider != null) ubqPointItemProvider.dispose();
		if (ubqBoundsItemProvider != null) ubqBoundsItemProvider.dispose();
		if (ubqWidgetItemProvider != null) ubqWidgetItemProvider.dispose();
		if (ubqImageItemProvider != null) ubqImageItemProvider.dispose();
		if (ubqButtonItemProvider != null) ubqButtonItemProvider.dispose();
		if (ubqLabelItemProvider != null) ubqLabelItemProvider.dispose();
		if (ubqCheckboxItemProvider != null) ubqCheckboxItemProvider.dispose();
		if (ubqTextItemProvider != null) ubqTextItemProvider.dispose();
		if (ubqMenuItemProvider != null) ubqMenuItemProvider.dispose();
		if (ubqMenuItemItemProvider != null) ubqMenuItemItemProvider.dispose();
		if (ubqIncrementableRangeItemProvider != null) ubqIncrementableRangeItemProvider.dispose();
		if (ubqVuMeterItemProvider != null) ubqVuMeterItemProvider.dispose();
		if (ubqSpinnerItemProvider != null) ubqSpinnerItemProvider.dispose();
		if (ubqSliderItemProvider != null) ubqSliderItemProvider.dispose();
		if (ubqKnobItemProvider != null) ubqKnobItemProvider.dispose();
		if (ubqWidgetStyleItemProvider != null) ubqWidgetStyleItemProvider.dispose();
		if (ubqColorStyleItemProvider != null) ubqColorStyleItemProvider.dispose();
		if (ubqFontStyleItemProvider != null) ubqFontStyleItemProvider.dispose();
		if (ubqBorderStyleItemProvider != null) ubqBorderStyleItemProvider.dispose();
		if (ubqColorItemProvider != null) ubqColorItemProvider.dispose();
		if (ubqHsbColorItemProvider != null) ubqHsbColorItemProvider.dispose();
		if (ubqRgbColorItemProvider != null) ubqRgbColorItemProvider.dispose();
	}

}
