/*
 *	IanniX Score File
 */


//When an incoming message is received, this method is called.
function onIncomingMessage(protocol, host, port, destination, values) {
	//Message reception
	if((protocol == "midi") && (destination == "cc") && (values.length > 2)) {
		//Control Change ID
		var cc    = values[1];
		//Control Change Value
		var ccVal = values[2];

		if((0 < cc) && (cc < points.length-1))
			points[cc].y            = map(ccVal, 0, 127, -8, 8);
		else if(cc == 31)
			rotate.x                = map(ccVal, 0, 127, -180, 180);
		else if(cc == 32)
			rotate.y                = map(ccVal, 0, 127, -180, 180);
		else if(cc == 33) 
			rotate.z                = map(ccVal, 0, 127, -180, 180);
		else if(cc == 34) 
			run("zoom "             + map(ccVal, 0, 127, 50, 250));
		else if(cc == 5)
			options.factor          = map(ccVal, 0, 127, 0, 5);
		else if(cc == 6)
			options.finefactor      = map(ccVal, 0, 127, -1, 1);
		else if(cc == 9)
			run("setSpeedF values " + map(ccVal, 0, 127, -0.4, 0.4));

		update(points, options);
	}
}

var points = [
			{x: -5, y:  0, z: -2},
			{x: -3, y: -4, z: -2},
			{x: -1, y:  2, z:  2},
			{x:  1, y: -1, z:  2},
			{x:  3, y:  4, z:  2},
			{x:  5, y:  2, z: -2},
			];
var rotate = {x: 0, y: -80, z:-10};
var options = {nb: 10, factor: 0, finefactor: 0.2};

//Creation of the score with script commands
function makeWithScript() {
	//Viewport setup
	run("clear");
		run("center 0 0");
	run("zoom 110");
	
	
	//Create your own curve!!
	addCurve(points, options);
	update(points, options);

	//Add triggers
	run("add trigger 2000");
	run("setPos current 0 0 2");
}

//Curve creation
function addCurve(pts, thick) {
	var id = 0;

	//Browse delta-curves
	for(var i = 0 ; i < thick.nb ; i++) {
		//Create curves
		run("add curve        " + (1000 + id));
		run("setGroup         current lines");
		if(i == thick.nb/2)
			run("setColor     current 255 80 30 255");
		
		//Create cursors
		run("add cursor       " + id);
		run("setGroup         current values");
		run("setCurve         current lastCurve");
		run("setBoundsSourceMode  current 1");
		run("setDepth         current 0.2");
			
		//Increment ID
		id++
	}
}

//Change curves
function update(pts, thick) {
	var id = 0;
	run("rotate " + rotate.x + " " + rotate.y + " " + rotate.z);

	//Browse delta-curves
	for(var i = 0 ; i < thick.nb ; i++) {
		//Create curves
		var val = 1+map(i, 0, thick.nb, -(thick.factor+thick.finefactor), thick.factor+thick.finefactor);

		//Browse points
		for(var ptIndex = 0 ; ptIndex < pts.length ; ptIndex++) {
			if((ptIndex == 0) || (ptIndex == (pts.length-1)))
				run("setSmoothPointAt " + (1000 + id) + " " + ptIndex + " " + pts[ptIndex].x + " " + pts[ptIndex].y + " " + pts[ptIndex].z);
			else
				run("setSmoothPointAt " + (1000 + id) + " " + ptIndex + " " + (pts[ptIndex].x*val) + " " + (pts[ptIndex].y*val) + " " +(pts[ptIndex].z*val));
		}
		run("setSpeed " + id + " auto 10");

		//Increment ID
		id++
	}
}


/*
 *	//APP VERSION: NEVER EVER REMOVE THIS LINE
 *	Made with IanniX 0.9.0
 *	//APP VERSION: NEVER EVER REMOVE THIS LINE
 */


/*
    IanniX - a graphical real-time open-source sequencer for digital art
    Copyright (C) 2010-2012 - IanniX Association

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

